#include <iostream>
#include <cstring>
#include <vector>
#include <fstream>

using namespace std;

enum mode {
	open, create
};
 
ios_base::openmode asIOSMode(mode m) {
	if (m == mode::open) {
		return ios::in | ios::out | ios::app;
	}
	else {
		return ios::in | ios::out | ios::trunc;
	}
}

class MessageQueue {
private:
	fstream file;

	void open_file(const char* filePath, mode mode) {
		file.open(filePath, asIOSMode(mode));
		if (!file.is_open()) {
			throw runtime_error("failed to open file");
		}
	}

public:
	MessageQueue(const char* filePath, mode mode = mode::create) {
		open_file(filePath, mode);
	}

	MessageQueue(const MessageQueue& that) {
		open_file("file.txt", mode::create);
	}

	~MessageQueue() {
		file.close();
	}

	void open(const char* filePath, mode mode = mode::open) {
		file.close(); //hehehe
		open_file(filePath, mode);
	}

};
#include "Messages.h"
#include <fstream>

Message::Message(const char* file, mode)
{
	if (mode::open)
	{
		std::ifstream file("file.txt");
		file.open(file);

		file.close();
	}
}

void Message::open(const char* file, mode)
{

}

size_t Message::read(const char* msg)
{
	return size_t();
}

void Message::write(const char* msg, size_t size)
{

}

void Message::sync()
{

}

#ifndef MESSAGES_H

#define MESSAGE_H

enum mode
{
	open, create
};

class Message
{
public:
	Message(const char* file, mode);
	void open(const char* file, mode);
	size_t read(const char* msg);
	void write(const char* msg, size_t size);
	void sync();


private:

};

Message::Message()
{
}

Message::~Message()
{
}

#endif // !MESSAGES_H
